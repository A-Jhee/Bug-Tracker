-- CREATE TABLE projects (
--   id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--   name varchar(60) UNIQUE NOT NULL,
--   description varchar(270) NOT NULL
-- );

-- REVOKE CREATE ON SCHEMA [public] FROM PUBLIC;
-- REVOKE ALL ON DATABASE [mydatabase] FROM PUBLIC;

-- SHOW hba_file;

-- CREATE ROLE [readonly];
-- GRANT CONNECT ON DATABASE [mydatabase] TO [readonly];
-- GRANT USAGE ON SCHEMA [myschema] TO [readonly];

-- GRANT SELECT ON TABLE [mytable1, mytable2] TO [readonly];
-- # For all tables and views in the schema
-- GRANT SELECT ON ALL TABLES IN SCHEMA [myschema] TO [readonly];
-- # To automatically grant permission on tables and views added in the future:
-- ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT SELECT ON TABLES TO readonly;

-- CREATE ROLE readwrite;
-- GRANT CONNECT ON DATABASE mydatabase TO readwrite;
-- GRANT USAGE ON SCHEMA myschema TO readwrite;
-- # To allow to create new objects like tables in this schema, then use the
-- # following SQL instead of the one preceding:
-- GRANT USAGE, CREATE ON SCHEMA myschema TO readwrite;

-- GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE mytable1, mytable2 TO readwrite;
-- # For all tables and views in the schema
-- GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA myschema TO readwrite;
-- # To automatically grant permission on tables and views added in the future:
-- ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO readwrite;

REVOKE CREATE ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON DATABASE bugtracker_database FROM PUBLIC;

CREATE SCHEMA bugtracker_schema;
-- ALTER ROLE "SFone" IN DATABASE bugtrack SET search_path TO bugtracker_schema,public;
ALTER ROLE postgres IN DATABASE bugtracker_database SET search_path TO bugtracker_schema,public;

CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_on = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TABLE tickets (
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  status text NOT NULL DEFAULT 'Open',
  title text NOT NULL UNIQUE,
  description text NOT NULL DEFAULT 'n/a',
  type text NOT NULL,
  priority text NOT NULL DEFAULT 'Low',
  submitter_id int NOT NULL,
  project_id int NOT NULL,
  developer_id int NOT NULL DEFAULT 0,
  created_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER update_timestamp BEFORE UPDATE ON tickets 
  FOR EACH ROW EXECUTE PROCEDURE update_timestamp();

CREATE ROLE quality_assurance;
GRANT CONNECT ON DATABASE bugtracker_database TO quality_assurance;
GRANT USAGE ON SCHEMA bugtracker_schema TO quality_assurance;