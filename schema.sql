-- CREATE TABLE projects (
--   id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--   name varchar(60) UNIQUE NOT NULL,
--   description varchar(270) NOT NULL
-- );

-- REVOKE CREATE ON SCHEMA [public] FROM PUBLIC;
-- REVOKE ALL ON DATABASE [mydatabase] FROM PUBLIC;

-- SHOW hba_file;
-- change pg_hba.conf to change access permission to database

-- CREATE ROLE [readonly];
-- GRANT CONNECT ON DATABASE [mydatabase] TO [readonly];
-- GRANT USAGE ON SCHEMA [myschema] TO [readonly];

-- GRANT SELECT ON TABLE [mytable1, mytable2] TO [readonly];
-- # For all tables and views in the schema
-- GRANT SELECT ON ALL TABLES IN SCHEMA [myschema] TO [readonly];
-- # To automatically grant permission on tables and views added in the future:
-- ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT SELECT ON TABLES TO readonly;

-- CREATE ROLE readwrite;
-- GRANT CONNECT ON DATABASE mydatabase TO readwrite;
-- GRANT USAGE ON SCHEMA myschema TO readwrite;
-- # To allow to create new objects like tables in this schema, then use the
-- # following SQL instead of the one preceding:
-- GRANT USAGE, CREATE ON SCHEMA myschema TO readwrite;

-- For read/write roles, there is normally a requirement to use sequences also. 
-- You can give selective access as follows:
-- GRANT USAGE ON SEQUENCE myseq1, myseq2 TO readwrite;
-- GRANT USAGE ON ALL SEQUENCES IN SCHEMA myschema TO readwrite;

-- GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE mytable1, mytable2 TO readwrite;
-- # For all tables and views in the schema
-- GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA myschema TO readwrite;
-- # To automatically grant permission on tables and views added in the future:
-- ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO readwrite;

-- ------------------------------------------------------------

-- Revoke inherited permission from public schema to CREATE objects.
REVOKE CREATE
    ON SCHEMA public
  FROM PUBLIC;
-- Revoke the ability for any user to connect to "bugtracker_database".
REVOKE ALL
    ON DATABASE bugtracker_database
  FROM PUBLIC;

-- Create "bugtracker_schema" to create all objects relating to bugtracker in.
CREATE SCHEMA bugtracker_schema;
-- set search_path to include the new schema and have it be before public.
-- this syntax makes it persist at database user level (case sensitive. user
-- names with uppercase letters will require quotation marks around it).
-- ALTER ROLE "SFone" IN DATABASE bugtrack SET search_path TO bugtracker_schema,public;
ALTER ROLE postgres IN DATABASE bugtracker_database SET search_path TO bugtracker_schema,public;
-- This one sets it database level
ALTER DATABASE <database_name> SET search_path TO schema1,schema2;

----------------------------------------------------------------------------
-- STATEMENTS RELATED TO USERS TABLE ---------------------------------------

CREATE TABLE users (
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  role text NOT NULL DEFAULT 'Unassigned',
  email text NOT NULL
);

CREATE TABLE user_logins (
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username text NOT NULL UNIQUE,
  password text NOT NULL,
  user_id int NOT NULL UNIQUE,
  FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

-- DUMMY USERS FOR DEVELOPMENT/TESTING

-- INSERT INTO users (id, name, role, email)
--   VALUES (0, 'Unassigned', 'Unassigned', 'Unassigned'),
--          (1, 'DEMO_Admin', 'admin', 'admin@demo.com'),
--          (2, 'DEMO_ProjectManager', 'project_manager', 'project_manager@demo.com'),
--          (3, 'DEMO_Developer', 'developer', 'developer@demo.com'),
--          (4, 'DEMO_QualityAssurance', 'quality_assurance', 'quality_assurance@demo.com'),
--          (5, 'TEST_Developer', 'developer', 'testdev@demo.com');

----------------------------------------------------------------------------
-- STATEMENTS RELATED TO PROJECTS TABLE ------------------------------------

CREATE TABLE projects(
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL UNIQUE,
  description text NOT NULL
);

----------------------------------------------------------------------------
-- STATEMENTS RELATED TO PROJECTS_USERS_ASSIGNMENT TABLE -------------------

CREATE TABLE projects_users_assignments(
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  project_id int NOT NULL,
  user_id int NOT NULL,
  role text NOT NULL,
  FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

----------------------------------------------------------------------------
-- STATEMENTS RELATED TO TICKETS TABLE -------------------------------------

-- Create function that updates "updated_on" column in "tickets" table with
-- current timestamp. Function returns a trigger.
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_on = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Contains info about all submitted tickets.
CREATE TABLE tickets (
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  status text NOT NULL DEFAULT 'Open',
  title text NOT NULL,
  description text NOT NULL DEFAULT 'n/a',
  type text NOT NULL,
  priority text NOT NULL DEFAULT 'Low',
  submitter_id int NOT NULL,
  project_id int NOT NULL,
  developer_id int NOT NULL DEFAULT 0,
  created_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (submitter_id) REFERENCES users (id) ON DELETE CASCADE,
  FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE
);

-- Create trigger that will call "update_timestamp" function when a row
-- of tickets table updates.
CREATE TRIGGER update_timestamp BEFORE 
     UPDATE ON tickets 
     FOR EACH ROW EXECUTE PROCEDURE update_timestamp();

-- Contains info about all ticket comments.
CREATE TABLE ticket_comments (
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  comment text NOT NULL,
  commenter_id int NOT NULL,
  ticket_id int NOT NULL,
  created_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (commenter_id) REFERENCES users (id) ON DELETE CASCADE,
  FOREIGN KEY (ticket_id) REFERENCES tickets (id) ON DELETE CASCADE
);

-- Contains info about all ticket update history.
CREATE TABLE ticket_update_history (
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  property text NOT NULL,
  previous_value text NOT NULL,
  current_value text NOT NULL,
  user_id int NOT NULL,
  ticket_id int NOT NULL,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
  FOREIGN KEY (ticket_id) REFERENCES tickets (id) ON DELETE CASCADE
);

-- Contains info about all ticket attachments. "filepath" points to
-- uploaded file's location within web server filesystem.
CREATE TABLE ticket_attachments (
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  filename text NOT NULL,
  uploader_id int NOT NULL,
  notes text NOT NULL DEFAULT 'n/a',
  ticket_id int NOT NULL,
  uploaded_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (ticket_id) REFERENCES tickets (id) ON DELETE CASCADE,
  FOREIGN KEY (uploader_id) REFERENCES users (id) ON DELETE CASCADE
);

-- STATEMENT CRAFTING TABLE ------------------------------------------------------------

-- INSERT INTO user_logins (username, password, user_id)
--      VALUES ('admin', '$2a$12$RzguNqAsu5nOAhF.Eg7yY.GPP1NdzXuv5.X5y5UvZrh0q8ByZ.Q6K', 1),
--             ('pm', '$2a$12$aTWgUqzzX8HiYPP/20jR2ONv8FLvEFbx9uaW7C5nBiqWFIispmc2u', 2),
--             ('dev1', '$2a$12$iycY3y2zGVaymdC7V1ChS.kHLzlG.wrKk5Fy4ZkSjSJZqCSXJ0p.u', 3),
--             ('qa', '$2a$12$LoDbPl8.McEQYAbeWdPia.UHfwXVN5JqsYuo/TDin8LfFKQ9Dhq0K', 4),
--             ('dev2', '$2a$12$IxRK1GBJxQ4zLts6kC.wUO/k1FqdCAD3Hb8vZ/H7ZOH2edIvzdmVy', 5);

-- PUSH DOWN TO NEAR END OF FILE ------------------------------------------------------------

-- "q_a" (quality assurance) role will have the privileges to:
-- SELECT, INSERT, and UPDATE: "tickets"
-- SELECT and INSERT: "ticket_comments", "ticket_attachments"
-- SELECT: "ticket_update_history"

CREATE ROLE q_a;

GRANT CONNECT
  ON DATABASE bugtracker_database
  TO q_a;

GRANT USAGE
   ON SCHEMA bugtracker_schema
   TO q_a;

GRANT SELECT, INSERT, UPDATE ON TABLE tickets TO q_a;

GRANT SELECT, INSERT ON ticket_comments, ticket_attachments TO q_a;

GRANT SELECT ON TABLE ticket_update_history TO q_a;

GRANT SELECT ON ALL TABLES IN SCHEMA bugtracker_schema TO q_a;

CREATE USER quality_assurance
       WITH PASSWORD '';

GRANT q_a TO quality_assurance;


-- ------------------------------------------------------------

CREATE ROLE auth;

GRANT CONNECT
  ON DATABASE bugtracker_database
  TO auth;

GRANT USAGE
   ON SCHEMA bugtracker_schema
   TO auth;

GRANT SELECT, INSERT ON TABLE users, user_logins TO auth;

GRANT USAGE ON SEQUENCE users_id_seq, user_logins_id_seq TO auth;

CREATE USER authentication
       WITH PASSWORD 'ldihn1uBGYJ3ESFQly0cpZ97MXPkGdLouTcD9czo';

GRANT auth TO authentication;

-- ------------------------------------------------------------
